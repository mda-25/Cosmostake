{"version":3,"sources":["components/styled/GlobalStyles.tsx","utils/theme/index.ts","utils/theme/colors.ts","utils/theme/size.ts","utils/theme/gradient.ts","utils/constants.ts","config/config.ts","store/methods/chooseAccount.ts","store/index.tsx","components/styled/Container.tsx","components/styled/Box.tsx","components/app/AppChainList.tsx","components/app/AppHeader.tsx","pages/NotFound.tsx","hooks/useApi.tsx","hooks/useRequest.tsx","utils/helpers.ts","hooks/useShowModal.tsx","components/LayoutModal.tsx","components/styled/Form.tsx","components/styled/Flex.tsx","components/styled/Btn.tsx","components/dashboard/delegations/FormUndelegate.tsx","components/styled/Card.tsx","components/BtnCopy.tsx","components/styled/Grid.tsx","components/dashboard/delegations/FormRedelegate.tsx","components/dashboard/delegations/MyDelegatedCard.tsx","utils/toastrHandle.ts","hooks/useStargateSDK.tsx","components/dashboard/styles/WrapperDashboard.tsx","components/dashboard/delegations/Delegations.tsx","components/dashboard/rewards/MyRewardCard.tsx","components/dashboard/rewards/Rewards.tsx","components/dashboard/unbonding-delegations/UnbondingDelegationCard.tsx","components/dashboard/unbonding-delegations/UnbondingDelegations.tsx","pages/Dashboard.tsx","components/styled/Tbl.tsx","components/table/Row.tsx","components/table/Table.tsx","components/stake/FormDelegate.tsx","components/stake/Delegate.tsx","pages/Stake.tsx","router/routes.ts","router/ScrollToTop.tsx","router/Routers.tsx","components/app/AppFooter.tsx","hooks/useThemeContext.tsx","components/app/AppNav.tsx","layouts/LayoutDefault.tsx","components/styled/Toastr.tsx","components/app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["createGlobalStyle","vars","black","white","lightGreen","error","blue","b10","b20","b30","b40","b50","b60","b70","b80","b90","b100","gray","g10","g20","g30","g40","g50","g60","g70","g80","g90","g100","fs14","fs16","fs18","fs20","fs22","fs24","gradientNav","gradientCard","gradientTableHead","CHAIN_LIST_MAINNET","name","chainId","coinMinimalDenom","coinDenom","rest","rpc","CHAIN_LIST_TESTNET","ChainInfos","chainName","bip44","coinType","bech32Config","Bech32Address","defaultBech32Config","currencies","coinDecimals","coinGeckoId","feeCurrencies","stakeCurrency","gasPriceStep","low","average","high","features","chooseAccount","currChain","a","window","keplr","getOfflineSigner","toast","addChain","find","chain","experimentalSuggestChain","console","enable","offlineSigner","signAmino","sign","getAccounts","accounts","store","createContext","state","Provider","StoreProvider","children","useState","setChain","account","setAcc","balance","setBal","setBalance","address","handleBalance","bal","data","balances","setAccount","localStorage","setItem","JSON","stringify","onload","localStoreChain","getItem","localChain","parse","provider","useMemo","value","CustomContainer","styled","Container","Box","div","theme","color","AppChainList","useContext","Dropdown","Toggle","variant","Menu","map","i","Item","onClick","Divider","TheHeader","AppHeader","to","Image","src","NotFound","useApi","api","axios","create","baseURL","timeout","API","getValidators","get","getDelegations","getReward","delegator","getBalance","getUnbondingDelegation","useRequest","isLoading","setIsLoading","resp","setResp","request","func","opt","tokenMutez","tokenFormat","capitalizeLetters","text","replace","toLocaleUpperCase","convertIntToMutez","amount","convertMutezToInt","ellipsis","string","start","end","substr","formatToken","symbol","Math","round","numeral","format","formatMinimalDenomToCoinDenom","val","Number","useShowModal","show","setShow","handleClose","handleShow","Modal","BModal","LayoutModal","title","onHide","Header","closeButton","Title","as","Body","Form","BForm","Flex","FlexAlignCenter","FlexJustifyCenter","WrapperBtn","schema","yup","shape","required","test","props","parent","FormUndelegate","delegate","handleRequest","delegation","validationSchema","initialValues","onSubmit","values","from","delegator_address","validator_address","denom","handleSubmit","handleChange","errors","setFieldValue","Group","Label","Control","disabled","InputGroup","type","placeholder","onChange","isInvalid","Button","id","shares","Feedback","Card","BCard","copy","success","BtnCopy","textToCopy","Grid","GridColumns","col","gap","validatorTo","FormRedelegate","validatorFrom","MyDelegatedCard","handleRedelegate","handleUndelegate","showRedelegate","handleShowRedelegate","handleCloseRedelegate","Text","toastrHandle","promiseFunc","pending","promise","handleErr","code","rawLog","useStargateSDK","setLoading","gas_limit","fee","coin","gas","client","useCallback","SigningStargateClient","connectWithSigner","Delegate","delegateTokens","floor","Undelegate","undelegateTokens","Claim","validator","withdrawRewards","Redelegate","msg","typeUrl","delegatorAddress","validatorSrcAddress","validatorDstAddress","signAndBroadcast","WrapperDashboardInfo","Delegations","useEffect","myDelegate","Object","keys","length","delegation_responses","Spinner","animation","MyRewardCard","handleClaim","reward","WrapperContent","Rewards","rewardsRequest","rewards","total","elem","WrapperEntries","UnbondingDelegationCard","entries","date","completion_time","moment","UnbondingDelegations","unbondingDelegations","unbonding_responses","Tabs","BTabs","Dashboard","defaultActiveKey","Tab","eventKey","Tbl","BTable","Tr","tr","h","Th","th","THead","thead","TBody","tbody","Row","row","cols","index","key","process","Table","rows","label","max","minDelegation","FormDelegate","handleDelegate","noValidate","operator_address","description","min_self_delegation","moniker","WrapperTable","routes","path","exact","component","validators","style","width","delegator_shares","commission","commission_rates","rate","role","ScrollToTop","pathname","useLocation","scrollTo","Routers","route","render","CustomBox","AppFooter","isYear","Date","getFullYear","useThemeContext","ThemeContext","WrapperList","WrapperAccount","WrapperBalance","ChainList","ul","Li","li","activeitem","hr","Link","NavLink","activeClassName","h2","AppNav","history","useHistory","handleSetAccount","chooseChain","size","marginRight","verticalAlign","href","target","rel","blockchain","Wrapper","StakeWrapper","LayoutDefault","Toastr","ToastContainer","App","GlobalStyles","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c2313784.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nexport default createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n    font-size: 14px;\n    color: white;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n  }\n  \n  h1, h2, h3, h4, h5 {\n    margin: 0;\n  }\n`;\n","import colors from './colors';\nimport size from './size';\nimport gradient from './gradient';\n\nconst vars = {\n    ...colors,\n    ...size,\n    ...gradient,\n};\n\nexport default vars;\n","export default {\n    black: '#000',\n    white: '#fff',\n    lightGreen: 'rgba(194,254,129,0.9)',\n    error: 'rgba(254,129,129,0.9)',\n    blue: {\n        b10: '#CCF3FF',\n        b20: '#B7EEFF',\n        b30: '#89E3FF',\n        b40: '#5CCFF4',\n        b50: '#35BFEA',\n        b60: '#24ADD8',\n        b70: '#0F94BD',\n        b80: '#087CA0',\n        b90: '#076785',\n        b100: '#0D4D61',\n    },\n    gray: {\n        g10: '#F5F8FA',\n        g20: '#E8EDF0',\n        g30: '#D5DBE0',\n        g40: '#C2C9CF',\n        g50: '#ADB4BA',\n        g60: '#8D9499',\n        g70: '#656D73',\n        g80: '#424A4F',\n        g90: '#292F33',\n        g100: '#131719',\n    },\n};\n","export default {\n    fs14: '14px',\n    fs16: '16px',\n    fs18: '18px',\n    fs20: '20px',\n    fs22: '22px',\n    fs24: '24px',\n};\n","export default {\n    gradientNav:\n        'linear-gradient(100deg, rgb(66, 74, 79) -3.02%, rgb(19, 23, 25) 93.08%)',\n    gradientCard:\n        'linear-gradient(130.04deg, #424a4f -19.42%, #1d2021 128.18%)',\n    gradientTableHead:\n        'linear-gradient(-45deg, rgba(66,74,79,0.6), rgba(29, 32, 33, 0.85) 0%)',\n};\n","import { IChainList } from '../interface/ChainList';\n\nexport const CHAIN_LIST_MAINNET: IChainList[] = [\n    {\n        name: 'cosmos',\n        chainId: 'cosmoshub',\n        coinMinimalDenom: 'uatom',\n        coinDenom: 'ATOM',\n        rest: 'https://api.cosmos.network',\n        rpc: 'https://rpc.cosmos.network',\n    },\n    {\n        name: 'osmosis',\n        chainId: 'osmosis',\n        coinMinimalDenom: 'uosmo',\n        coinDenom: 'OSMO',\n        rest: 'https://lcd-osmosis.keplr.app',\n        rpc: 'https://rpc-osmosis.itastakers.com',\n    },\n    {\n        name: 'kava',\n        chainId: 'kava',\n        coinMinimalDenom: 'ukava',\n        coinDenom: 'KAVA',\n        rest: 'https://lcd-kava.keplr.app',\n        rpc: 'https://rpc.kava.io',\n    },\n];\n\nexport const CHAIN_LIST_TESTNET = [\n    {\n        name: 'vega-testnet',\n        chainId: 'vega-testnet',\n        coinMinimalDenom: 'uatom',\n        coinDenom: 'ATOM',\n        rest: 'http://198.50.215.1:3327',\n        rpc: 'http://198.50.215.1:36657',\n    },\n    {\n        name: 'Photon-testnet',\n        chainId: 'cosmoshub-testnet',\n        coinMinimalDenom: 'uphoton',\n        coinDenom: 'PHOTON',\n        rpc: 'https://rpc.testnet.cosmos.network:443',\n        rest: 'https://api.testnet.cosmos.network:443',\n    },\n];\n","import type { ChainInfo } from '@keplr-wallet/types';\nimport { Bech32Address } from '@keplr-wallet/cosmos';\n\nexport const ChainInfos: ChainInfo[] = [\n    {\n        chainId: 'vega-testnet',\n        chainName: 'vega-testnet',\n        rpc: 'http://198.50.215.1:36657',\n        rest: 'http://198.50.215.1:3327',\n        bip44: {\n            coinType: 118,\n        },\n        bech32Config: Bech32Address.defaultBech32Config('cosmos'),\n        currencies: [\n            {\n                coinDenom: 'ATOM',\n                coinMinimalDenom: 'uatom',\n                coinDecimals: 6,\n                coinGeckoId: 'cosmos',\n            },\n        ],\n        feeCurrencies: [\n            {\n                coinDenom: 'ATOM',\n                coinMinimalDenom: 'uatom',\n                coinDecimals: 6,\n                coinGeckoId: 'cosmos',\n            },\n        ],\n        stakeCurrency: {\n            coinDenom: 'ATOM',\n            coinMinimalDenom: 'uatom',\n            coinDecimals: 6,\n            coinGeckoId: 'cosmos',\n        },\n        coinType: 118,\n        gasPriceStep: {\n            low: 1,\n            average: 1,\n            high: 1,\n        },\n        features: ['stargate', 'no-legacy-stdTx', 'ibc-transfer'],\n    },\n    {\n        chainId: 'cosmoshub-testnet',\n        chainName: 'Photon',\n        rpc: 'https://rpc.testnet.cosmos.network:443',\n        rest: 'https://api.testnet.cosmos.network:443',\n        // Staking coin information\n        stakeCurrency: {\n            // Coin denomination to be displayed to the user.\n            coinDenom: 'PHOTON',\n            // Actual denom (i.e. uatom, uscrt) used by the blockchain.\n            coinMinimalDenom: 'uphoton',\n            // # of decimal points to convert minimal denomination to user-facing denomination.\n            coinDecimals: 6,\n            // (Optional) Keplr can show the fiat value of the coin if a coingecko id is provided.\n            // You can get id from https://api.coingecko.com/api/v3/coins/list if it is listed.\n            // coinGeckoId: \"\"\n        },\n        // (Optional) If you have a wallet webpage used to stake the coin then provide the url to the website in `walletUrlForStaking`.\n        // The 'stake' button in Keplr extension will link to the webpage.\n        // walletUrlForStaking: \"\",\n        // The BIP44 path.\n        bip44: {\n            // You can only set the coin type of BIP44.\n            // 'Purpose' is fixed to 44.\n            coinType: 118,\n        },\n        bech32Config: Bech32Address.defaultBech32Config('cosmos'),\n        // List of all coin/tokens used in this chain.\n        currencies: [\n            {\n                // Coin denomination to be displayed to the user.\n                coinDenom: 'PHOTON',\n                // Actual denom (i.e. uatom, uscrt) used by the blockchain.\n                coinMinimalDenom: 'uphoton',\n                // # of decimal points to convert minimal denomination to user-facing denomination.\n                coinDecimals: 6,\n                // (Optional) Keplr can show the fiat value of the coin if a coingecko id is provided.\n                // You can get id from https://api.coingecko.com/api/v3/coins/list if it is listed.\n                // coinGeckoId: \"\"\n            },\n        ],\n        // List of coin/tokens used as a fee token in this chain.\n        feeCurrencies: [\n            {\n                // Coin denomination to be displayed to the user.\n                coinDenom: 'PHOTON',\n                // Actual denom (i.e. uatom, uscrt) used by the blockchain.\n                coinMinimalDenom: 'uphoton',\n                // # of decimal points to convert minimal denomination to user-facing denomination.\n                coinDecimals: 6,\n                // (Optional) Keplr can show the fiat value of the coin if a coingecko id is provided.\n                // You can get id from https://api.coingecko.com/api/v3/coins/list if it is listed.\n                // coinGeckoId: \"\"\n            },\n        ],\n        // (Optional) The number of the coin type.\n        // This field is only used to fetch the address from ENS.\n        // Ideally, it is recommended to be the same with BIP44 path's coin type.\n        // However, some early chains may choose to use the Cosmos Hub BIP44 path of '118'.\n        // So, this is separated to support such chains.\n        coinType: 118,\n        // (Optional) This is used to set the fee of the transaction.\n        // If this field is not provided, Keplr extension will set the default gas price as (low: 0.01, average: 0.025, high: 0.04).\n        // Currently, Keplr doesn't support dynamic calculation of the gas prices based on on-chain data.\n        // Make sure that the gas prices are higher than the minimum gas prices accepted by chain validators and RPC/REST endpoint.\n        gasPriceStep: {\n            low: 0.01,\n            average: 0.025,\n            high: 0.04,\n        },\n    },\n];\n","import { IChainList } from '../../interface/ChainList';\nimport { ChainInfos } from '../../config/config';\nimport { ChainInfo } from '@keplr-wallet/types';\nimport { toast } from 'react-toastify';\n\nexport const chooseAccount = async (currChain: IChainList) => {\n    if (!window.keplr || !window.getOfflineSigner) {\n        toast.error('Install keplr wallet');\n    } else {\n        const addChain = ChainInfos.find(\n            (chain: ChainInfo) => chain.chainId === currChain.chainId,\n        );\n        if (addChain) {\n            try {\n                await window.keplr.experimentalSuggestChain(addChain);\n            } catch (e) {\n                console.error('Failed to suggest the chain');\n            }\n        }\n\n        await window.keplr.enable(currChain.chainId);\n\n        const offlineSigner = window.getOfflineSigner(currChain.chainId);\n        offlineSigner.signAmino = offlineSigner.signAmino || offlineSigner.sign;\n        const accounts = await offlineSigner.getAccounts();\n\n        return accounts[0];\n    }\n};\n","import React, { createContext, FC, useMemo, useState } from 'react';\nimport { CHAIN_LIST_MAINNET } from '../utils/constants';\nimport { chooseAccount } from './methods/chooseAccount';\nimport { IChainList } from '../interface/ChainList';\n\ninterface IInitialState {\n    chain?: IChainList;\n    account?: any;\n}\n\nconst initialState: IInitialState = {};\n\nconst store = createContext<any>({\n    state: initialState,\n});\n\nconst { Provider } = store;\n\nconst StoreProvider: FC = ({ children }) => {\n    const [chain, setChain] = useState<any>();\n    const [account, setAcc] = useState();\n    const [balance, setBal] = useState();\n\n    const setBalance = async (\n        address: string,\n        handleBalance: (address: string) => Promise<any>,\n    ) => {\n        try {\n            const bal = await handleBalance(address);\n\n            setBal(bal.data.balances[0]);\n        } catch (e: any) {\n            console.error(e);\n        }\n    };\n\n    const setAccount = async (chain: IChainList) => {\n        localStorage.setItem('chain', JSON.stringify(chain));\n\n        setChain(chain);\n\n        const account = await chooseAccount(chain);\n        setAcc(account);\n    };\n\n    window.onload = async () => {\n        const localStoreChain = localStorage.getItem('chain');\n        if (typeof localStoreChain === 'string') {\n            const localChain = JSON.parse(localStoreChain);\n            await setAccount(localChain);\n        } else {\n            await setAccount(CHAIN_LIST_MAINNET[0]);\n        }\n    };\n\n    const provider = useMemo(() => {\n        return {\n            setAccount,\n            setBalance,\n            chain,\n            account,\n            balance,\n        };\n    }, [chain, account, balance]);\n\n    return <Provider value={provider}>{children}</Provider>;\n};\n\nexport { store, StoreProvider };\n","import styled from 'styled-components';\nimport { Container } from 'react-bootstrap';\n\nexport const CustomContainer = styled(Container)`\n    margin: 0 auto;\n    max-width: 1400px;\n\n    @media (max-width: 1400px) {\n        padding: 0 10px;\n    }\n`;\n","import styled from 'styled-components';\n\ntype TBox = {\n    color?: string;\n};\n\nconst Box = styled.div<TBox>`\n    background: ${({ theme, color }) => color || theme.white};\n`;\n\nexport default Box;\n","import React, { useContext } from 'react';\nimport { Dropdown } from 'react-bootstrap';\nimport { CHAIN_LIST_MAINNET, CHAIN_LIST_TESTNET } from '../../utils/constants';\nimport { store } from '../../store';\n\nconst AppChainList = () => {\n    const { chain, setAccount } = useContext(store);\n\n    return (\n        <>\n            {chain && (\n                <Dropdown>\n                    <Dropdown.Toggle variant=\"primary\">\n                        {chain.name}\n                    </Dropdown.Toggle>\n\n                    <Dropdown.Menu variant=\"dark\">\n                        {CHAIN_LIST_MAINNET.map((chain, i) => (\n                            <Dropdown.Item\n                                key={i}\n                                onClick={() => setAccount(chain)}\n                            >\n                                {chain.name}\n                            </Dropdown.Item>\n                        ))}\n\n                        <Dropdown.Divider />\n\n                        {CHAIN_LIST_TESTNET.map((chain, i) => (\n                            <Dropdown.Item\n                                key={i}\n                                onClick={() => setAccount(chain)}\n                            >\n                                {chain.name}\n                            </Dropdown.Item>\n                        ))}\n                    </Dropdown.Menu>\n                </Dropdown>\n            )}\n        </>\n    );\n};\n\nexport default AppChainList;\n","import React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { Button, Image } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { CustomContainer } from '../styled/Container';\nimport Box from '../styled/Box';\nimport AppChainList from './AppChainList';\n\nconst TheHeader = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    height: 70px;\n    padding: 10px 0;\n`;\n\nconst AppHeader = () => {\n    return (\n        <Box color=\"linear-gradient(-10deg, #424a4f -3.02%, #131719 50.08%)\">\n            <CustomContainer>\n                <TheHeader>\n                    <Link to=\"/\">\n                        <Image src=\"https://cosmoscan.net/static/media/logo-blue.de555fac.svg\" />\n                    </Link>\n\n                    <AppChainList />\n                </TheHeader>\n            </CustomContainer>\n        </Box>\n    );\n};\n\nexport default AppHeader;\n","import React from 'react';\n\nconst NotFound = () => {\n    return <div>Not found</div>;\n};\n\nexport default NotFound;\n","import { useMemo } from 'react';\nimport axios from 'axios';\nimport { IChainList } from '../interface/ChainList';\nimport { CHAIN_LIST_MAINNET } from '../utils/constants';\n\nconst useApi = (chain: IChainList) => {\n    const api = useMemo(() => {\n        const localStoreChain = localStorage.getItem('chain');\n        if (typeof localStoreChain === 'string') {\n            const localChain = JSON.parse(localStoreChain);\n            return axios.create({\n                baseURL: localChain.rest,\n                timeout: 30000,\n            });\n        }\n        return axios.create({\n            baseURL: CHAIN_LIST_MAINNET[0].rest,\n            timeout: 30000,\n        });\n    }, [chain]);\n\n    const API = {\n        getValidators() {\n            // return api.get('/staking/validators');\n            return api.get('/cosmos/staking/v1beta1/validators');\n        },\n        getDelegations(address?: string) {\n            return api.get(`/cosmos/staking/v1beta1/delegations/${address}`);\n            // return api.get(`/staking/delegators/${address}/delegations`);\n        },\n        getReward(delegator: string) {\n            return api.get(\n                `/cosmos/distribution/v1beta1/delegators/${delegator}/rewards`,\n            );\n            // return api.get(`/distribution/delegators/${delegator}/rewards`);\n        },\n        getBalance(address: string) {\n            return api.get(`/cosmos/bank/v1beta1/balances/${address}`);\n            // return api.get(`/bank/balances/${address}`);\n        },\n        getUnbondingDelegation(address: string) {\n            return api.get(\n                `/cosmos/staking/v1beta1/delegators/${address}/unbonding_delegations`,\n                // `/staking/delegators/${address}/unbonding_delegations`,\n            );\n        },\n    };\n\n    return {\n        API,\n    };\n};\n\nexport default useApi;\n","import { useState } from 'react';\n\nexport type TFunc = {\n    (opt?: any): any;\n};\n\nconst useRequest = () => {\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [resp, setResp] = useState<any>({});\n\n    const request = async (func: TFunc, opt?: any) => {\n        try {\n            setIsLoading(true);\n            const data = await func(opt);\n\n            setResp(data.data);\n        } catch (e: any) {\n            console.error(e);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    return {\n        request,\n        isLoading,\n        resp,\n    };\n};\n\nexport default useRequest;\n","import numeral from 'numeral';\nimport moment from 'moment';\n\nconst tokenMutez = 1000000;\nconst tokenFormat = '0,0.[0000]';\n\nexport const formatPercent = (value: string | number | bigint): string => {\n    return `${numeral(Number(value) * 100).format('0.0')}%`;\n};\n\nexport const capitalizeLetters = (text: string): string => {\n    if (!text) return '';\n    return text.replace(text[0], text[0].toLocaleUpperCase());\n};\n\nexport const convertIntToMutez = (amount: number): number => {\n    return amount * tokenMutez;\n};\n\nexport const convertMutezToInt = (amount: number): number => {\n    return amount / tokenMutez;\n};\n\nexport const ellipsis = (string: string, start = 12, end = -7): string => {\n    if (!string) return '';\n    return `${string.substr(0, start)}...${string.substr(end)}`;\n};\n\nexport const formatToken = (value: number, symbol = ''): string => {\n    if (!value) return '0';\n\n    const amount = Math.round(value);\n    return `${numeral(convertMutezToInt(amount)).format('0,0')} ${symbol}`;\n};\n\nexport const formatMinimalDenomToCoinDenom = (\n    val: number | string,\n    coinDenom = '',\n): string => {\n    const value = Number(val);\n\n    if (!value || 1 > value) return `0 ${coinDenom}`;\n    else if (value > 1000 * tokenMutez) {\n        return `${numeral(convertMutezToInt(value)).format(\n            '0,[]',\n        )} ${coinDenom}`;\n    } else if (value > 100 * tokenMutez) {\n        return `${numeral(convertMutezToInt(value)).format(\n            '0,0.[00]',\n        )} ${coinDenom}`;\n    } else if (value > 10 * tokenMutez) {\n        return `${numeral(convertMutezToInt(value)).format(\n            tokenFormat,\n        )} ${coinDenom}`;\n    } else if (value < tokenMutez) {\n        return `${numeral(convertMutezToInt(value)).format(\n            '0,0.[000000000]',\n        )} ${coinDenom}`;\n    }\n\n    return `${convertMutezToInt(value)} ${coinDenom}`;\n};\n\nexport const formatDate = (date: string) => {\n    if (!date) return '---';\n\n    return moment(date).format('lll');\n};\n","import { useState } from 'react';\n\nconst useShowModal = () => {\n    const [show, setShow] = useState<boolean>(false);\n\n    const handleClose = (): void => setShow(false);\n    const handleShow = (): void => setShow(true);\n\n    return {\n        show,\n        handleClose,\n        handleShow,\n    };\n};\n\nexport default useShowModal;\n","import React, { FC } from 'react';\nimport { Modal as BModal } from 'react-bootstrap';\nimport styled from 'styled-components';\n\ninterface IModalProps {\n    handleClose(): void;\n    show: boolean;\n    title: string;\n}\n\nconst Modal = styled(BModal)`\n    color: black;\n`;\n\nconst LayoutModal: FC<IModalProps> = ({\n    children,\n    handleClose,\n    show,\n    title,\n}) => {\n    return (\n        <Modal show={show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title as=\"h5\">{title}</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>{children}</Modal.Body>\n        </Modal>\n    );\n};\n\nexport default LayoutModal;\n","import styled from 'styled-components';\nimport { Form as BForm, FormProps } from 'react-bootstrap';\n\nconst Form = styled(BForm)<FormProps>`\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n`;\n\nexport { Form };\n","import styled from 'styled-components';\n\nconst Flex = styled.div`\n    display: flex;\n`;\n\nconst FlexAlignCenter = styled(Flex)`\n    align-items: center;\n`;\n\nconst FlexJustifyCenter = styled(Flex)`\n    justify-content: center;\n`;\n\nconst FlexCenter = styled(Flex)`\n    justify-content: center;\n    align-items: center;\n`;\n\nexport { Flex, FlexAlignCenter, FlexCenter, FlexJustifyCenter };\n","import styled from 'styled-components';\nimport { Flex } from './Flex';\n\nconst WrapperBtn = styled(Flex)`\n    gap: 20px;\n`;\n\nexport { WrapperBtn };\n","import React from 'react';\nimport { Form } from '../../styled/Form';\nimport { Button, InputGroup } from 'react-bootstrap';\nimport { WrapperBtn } from '../../styled/Btn';\nimport { convertMutezToInt } from '../../../utils/helpers';\nimport { Formik, Field } from 'formik';\nimport * as yup from 'yup';\nimport { IOption } from '../../../hooks/useStargateSDK';\nimport { IDelegatedProps } from '../../../interface/Delegate';\n\ninterface IUndelegateProps extends IDelegatedProps {\n    handleClose(): void;\n    handleRequest(opt?: IOption): void;\n}\n\nconst schema = yup.object().shape({\n    amount: yup\n        .number()\n        .required('Required')\n        .test(\n            'amount',\n            'Max value',\n            (val: any, props: any) => val <= props.parent.balance,\n        ),\n});\n\nconst FormUndelegate = ({\n    delegate,\n    handleClose,\n    handleRequest,\n}: IUndelegateProps) => {\n    const { delegation, balance } = delegate;\n\n    const handleSubmit = (amount: number) => {\n        handleRequest({\n            from: delegation.delegator_address,\n            to: delegation.validator_address,\n            amount,\n            denom: balance.denom,\n        });\n\n        handleClose();\n    };\n\n    return (\n        <Formik\n            validationSchema={schema}\n            initialValues={{\n                amount: '',\n                balance: convertMutezToInt(balance.amount),\n            }}\n            onSubmit={(values) => {\n                if (typeof values.amount !== 'string') {\n                    handleSubmit(values.amount);\n                }\n            }}\n        >\n            {({\n                handleSubmit,\n                handleChange,\n                values,\n                errors,\n                setFieldValue,\n            }) => (\n                <Form onSubmit={handleSubmit}>\n                    <Form.Group>\n                        <Form.Label>Delegate to</Form.Label>\n                        <Form.Control\n                            value={delegation.validator_address}\n                            disabled\n                        />\n                    </Form.Group>\n\n                    <div>\n                        <Form.Label>Amount to Delegate</Form.Label>\n                        <InputGroup>\n                            <Field\n                                as={Form.Control}\n                                name=\"amount\"\n                                type=\"number\"\n                                placeholder=\"Enter amount\"\n                                value={values.amount}\n                                onChange={handleChange}\n                                isInvalid={!!errors.amount}\n                            />\n                            <Button\n                                variant=\"outline-primary\"\n                                id=\"button-addon2\"\n                                onClick={() =>\n                                    setFieldValue(\n                                        'amount',\n                                        convertMutezToInt(\n                                            Number(delegation.shares),\n                                        ),\n                                    )\n                                }\n                            >\n                                max\n                            </Button>\n                            <Form.Control.Feedback type=\"invalid\">\n                                {errors.amount}\n                            </Form.Control.Feedback>\n                        </InputGroup>\n                    </div>\n\n                    <WrapperBtn>\n                        <Button\n                            variant=\"secondary\"\n                            type=\"button\"\n                            onClick={handleClose}\n                        >\n                            Close\n                        </Button>\n\n                        <Button variant=\"primary\" type=\"submit\">\n                            Undelegat\n                        </Button>\n                    </WrapperBtn>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n\nexport default FormUndelegate;\n","import styled from 'styled-components';\nimport { Card as BCard } from 'react-bootstrap';\n\nconst Card = styled(BCard)`\n    min-width: 250px;\n    background: ${({ theme }) => theme.gradientCard};\n`;\n\nCard.Body = styled.div`\n    display: grid;\n    row-gap: 10px;\n    padding: 10px 20px;\n`;\n\nexport default Card;\n","import React from 'react';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { Button } from 'react-bootstrap';\nimport { Files } from 'react-bootstrap-icons';\nimport { toast } from 'react-toastify';\n\ninterface IBtnCopy {\n    textToCopy: string;\n}\n\nconst copy = () => toast.success('Copy');\n\nconst BtnCopy = ({ textToCopy }: IBtnCopy) => {\n    return (\n        <CopyToClipboard text={textToCopy}>\n            <Button variant=\"link\" onClick={copy}>\n                <Files />\n            </Button>\n        </CopyToClipboard>\n    );\n};\n\nexport default BtnCopy;\n","import styled from 'styled-components';\n\ninterface GridProps {\n    col?: string;\n    gap?: string;\n}\n\nconst Grid = styled.div`\n    display: grid;\n`;\n\nconst GridColumns = styled(Grid)<GridProps>`\n    grid-template-columns: ${({ col }) => col};\n    column-gap: ${({ gap }) => gap};\n`;\n\nexport { Grid, GridColumns };\n","import React from 'react';\nimport { Form } from '../../styled/Form';\nimport { Button, InputGroup } from 'react-bootstrap';\nimport { WrapperBtn } from '../../styled/Btn';\nimport { convertMutezToInt } from '../../../utils/helpers';\nimport { Formik, Field } from 'formik';\nimport * as yup from 'yup';\nimport { IRedelegate } from '../../../hooks/useStargateSDK';\nimport { IDelegatedProps } from '../../../interface/Delegate';\n\ninterface IRedelegateProps extends IDelegatedProps {\n    handleClose(): void;\n    handleRequest(opt?: IRedelegate): void;\n}\n\nconst schema = yup.object().shape({\n    amount: yup\n        .number()\n        .required('Required')\n        .test(\n            'amount',\n            'Max value',\n            (val: any, props: any) => val <= props.parent.balance,\n        ),\n    validatorTo: yup.string().required('Required'),\n});\n\nconst FormRedelegate = ({\n    delegate,\n    handleClose,\n    handleRequest,\n}: IRedelegateProps) => {\n    const { delegation, balance } = delegate;\n\n    const handleSubmit = (amount: number, validatorTo: string) => {\n        handleRequest({\n            delegator: delegation.delegator_address,\n            validatorFrom: delegation.validator_address,\n            validatorTo,\n            amount,\n            denom: balance.denom,\n        });\n\n        handleClose();\n    };\n\n    return (\n        <Formik\n            validationSchema={schema}\n            initialValues={{\n                amount: '',\n                validatorTo: '',\n                balance: convertMutezToInt(balance.amount),\n            }}\n            onSubmit={(values) => {\n                if (typeof values.amount !== 'string') {\n                    handleSubmit(values.amount, values.validatorTo);\n                }\n            }}\n        >\n            {({\n                handleSubmit,\n                handleChange,\n                values,\n                errors,\n                setFieldValue,\n            }) => (\n                <Form onSubmit={handleSubmit}>\n                    <Form.Group>\n                        <Form.Label>Validator current</Form.Label>\n                        <Form.Control\n                            value={delegation.validator_address}\n                            disabled\n                        />\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label>Validator to</Form.Label>\n                        <Field\n                            as={Form.Control}\n                            name=\"validatorTo\"\n                            value={values.validatorTo}\n                            onChange={handleChange}\n                            isInvalid={!!errors.validatorTo}\n                        />\n\n                        <Form.Control.Feedback type=\"invalid\">\n                            {errors.validatorTo}\n                        </Form.Control.Feedback>\n                    </Form.Group>\n\n                    <div>\n                        <Form.Label>Amount to Delegate</Form.Label>\n                        <InputGroup>\n                            <Field\n                                as={Form.Control}\n                                name=\"amount\"\n                                type=\"number\"\n                                placeholder=\"Enter amount\"\n                                value={values.amount}\n                                onChange={handleChange}\n                                isInvalid={!!errors.amount}\n                            />\n                            <Button\n                                variant=\"outline-primary\"\n                                id=\"button-addon2\"\n                                onClick={() =>\n                                    setFieldValue(\n                                        'amount',\n                                        convertMutezToInt(\n                                            Number(delegation.shares),\n                                        ),\n                                    )\n                                }\n                            >\n                                max\n                            </Button>\n                            <Form.Control.Feedback type=\"invalid\">\n                                {errors.amount}\n                            </Form.Control.Feedback>\n                        </InputGroup>\n                    </div>\n\n                    <WrapperBtn>\n                        <Button\n                            variant=\"secondary\"\n                            type=\"button\"\n                            onClick={handleClose}\n                        >\n                            Close\n                        </Button>\n\n                        <Button variant=\"primary\" type=\"submit\">\n                            Redelegate\n                        </Button>\n                    </WrapperBtn>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n\nexport default FormRedelegate;\n","import React, { useContext } from 'react';\nimport { Button } from 'react-bootstrap';\nimport {\n    ellipsis,\n    formatMinimalDenomToCoinDenom,\n} from '../../../utils/helpers';\nimport { store } from '../../../store';\nimport useShowModal from '../../../hooks/useShowModal';\nimport LayoutModal from '../../LayoutModal';\nimport FormUndelegate from './FormUndelegate';\nimport type { IOption, IRedelegate } from '../../../hooks/useStargateSDK';\nimport Card from '../../styled/Card';\nimport BtnCopy from '../../BtnCopy';\nimport { FlexAlignCenter } from '../../styled/Flex';\nimport { GridColumns } from '../../styled/Grid';\nimport FormRedelegate from './FormRedelegate';\nimport { IDelegatedProps } from '../../../interface/Delegate';\n\ninterface IDelegateEvents extends IDelegatedProps {\n    handleUndelegate(opt?: IOption): void;\n    handleRedelegate(opt?: IRedelegate): void;\n}\n\nconst MyDelegatedCard = ({\n    delegate,\n    handleRedelegate,\n    handleUndelegate,\n}: IDelegateEvents) => {\n    const { chain } = useContext(store);\n    const { show, handleShow, handleClose } = useShowModal();\n    const {\n        show: showRedelegate,\n        handleShow: handleShowRedelegate,\n        handleClose: handleCloseRedelegate,\n    } = useShowModal();\n    const { delegation } = delegate;\n\n    return (\n        <Card>\n            <Card.Header as=\"h5\">Delegated</Card.Header>\n            <Card.Body>\n                <FlexAlignCenter>\n                    Validator: {ellipsis(delegation.validator_address, 15, -5)}\n                    <BtnCopy textToCopy={delegation.validator_address} />\n                </FlexAlignCenter>\n\n                <Card.Text>\n                    Balance:{' '}\n                    {formatMinimalDenomToCoinDenom(\n                        Number(delegation.shares),\n                        chain.coinDenom,\n                    )}\n                </Card.Text>\n\n                <GridColumns col=\"repeat(2, 1fr)\" gap=\"10px\">\n                    <Button variant=\"primary\" onClick={handleShow}>\n                        Undelegate\n                    </Button>\n\n                    <Button variant=\"primary\" onClick={handleShowRedelegate}>\n                        Redelegate\n                    </Button>\n                </GridColumns>\n\n                <LayoutModal\n                    handleClose={handleClose}\n                    show={show}\n                    title=\"Undelegation\"\n                >\n                    <FormUndelegate\n                        delegate={delegate}\n                        handleClose={handleClose}\n                        handleRequest={handleUndelegate}\n                    />\n                </LayoutModal>\n\n                <LayoutModal\n                    handleClose={handleCloseRedelegate}\n                    show={showRedelegate}\n                    title=\"Redelegate\"\n                >\n                    <FormRedelegate\n                        delegate={delegate}\n                        handleClose={handleCloseRedelegate}\n                        handleRequest={handleRedelegate}\n                    />\n                </LayoutModal>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default MyDelegatedCard;\n","import { toast } from 'react-toastify';\nimport { DeliverTxResponse } from '@cosmjs/stargate';\n\nconst toastrHandle = (\n    promiseFunc: any,\n    opt = {\n        pending: 'Waiting for dispatch',\n        // success: 'Success!',\n        error: 'Promise rejected',\n    },\n): Promise<DeliverTxResponse> => {\n    return toast.promise(promiseFunc, opt);\n};\n\nexport default toastrHandle;\n","import { coin, SigningStargateClient, StdFee } from '@cosmjs/stargate';\nimport { useCallback, useMemo, useState } from 'react';\nimport { IChainList } from '../interface/ChainList';\nimport toastrHandle from '../utils/toastrHandle';\nimport { toast } from 'react-toastify';\n\nexport interface IOption {\n    from: string;\n    to: string;\n    amount: number;\n    denom: string;\n}\n\nexport interface IRedelegate {\n    delegator: string;\n    validatorFrom: string;\n    validatorTo: string;\n    amount: number;\n    denom: string;\n}\n\ntype TClaimProps = {\n    delegate: string;\n    validator: string;\n};\n\nconst handleErr = (resp: any) => {\n    if (resp.code === 0) {\n        toast.success('Success!');\n    } else {\n        throw resp.rawLog;\n    }\n};\n\nconst useStargateSDK = (chain: IChainList) => {\n    const [isLoading, setLoading] = useState<boolean>(false);\n\n    // const gas_limit = '80000';\n    const gas_limit = useMemo(\n        () => (chain?.chainId === 'cosmoshub-testnet' ? '200000' : '80000'),\n        [chain],\n    );\n    const fee: StdFee = {\n        amount: [coin(1, 'uatom')],\n        gas: gas_limit,\n    };\n\n    const client = useCallback(async (): Promise<SigningStargateClient> => {\n        const offlineSigner = window.getOfflineSigner(chain.chainId);\n        offlineSigner.signAmino = offlineSigner.signAmino || offlineSigner.sign;\n\n        return await SigningStargateClient.connectWithSigner(\n            chain.rpc,\n            offlineSigner,\n        );\n    }, [chain]);\n\n    const Delegate = async ({ from, to, amount, denom }: IOption) => {\n        const rpc = await client();\n        try {\n            setLoading(true);\n\n            const resp = await toastrHandle(\n                rpc.delegateTokens(\n                    from,\n                    to,\n                    coin(Math.floor(amount), denom),\n                    fee,\n                ),\n            );\n\n            handleErr(resp);\n        } catch (e: any) {\n            toast.error(e);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const Undelegate = async ({ from, to, amount, denom }: IOption) => {\n        const rpc = await client();\n        try {\n            setLoading(true);\n            const resp = await toastrHandle(\n                rpc.undelegateTokens(\n                    from,\n                    to,\n                    coin(Math.floor(amount), denom),\n                    fee,\n                ),\n            );\n\n            handleErr(resp);\n        } catch (e: any) {\n            toast.error(e);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const Claim = async ({ delegate, validator }: TClaimProps) => {\n        const rpc = await client();\n\n        try {\n            setLoading(true);\n            const resp = await toastrHandle(\n                rpc.withdrawRewards(delegate, validator, fee),\n            );\n\n            handleErr(resp);\n        } catch (e: any) {\n            toast.error(e);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const Redelegate = async ({\n        delegator,\n        validatorFrom,\n        validatorTo,\n        amount,\n        denom,\n    }: IRedelegate) => {\n        const rpc = await client();\n\n        const msg = {\n            typeUrl: '/cosmos.staking.v1beta1.MsgBeginRedelegate',\n            value: {\n                delegatorAddress: delegator,\n                validatorSrcAddress: validatorFrom,\n                validatorDstAddress: validatorTo,\n                amount: coin(amount, denom),\n            },\n        };\n\n        try {\n            setLoading(true);\n\n            const resp = await toastrHandle(\n                rpc.signAndBroadcast(\n                    'cosmos17ht88wh672df3r4eqh7qvtpnq692hh5ngy24qc',\n                    [msg],\n                    fee,\n                ),\n            );\n\n            handleErr(resp);\n        } catch (e: any) {\n            toast.error(e);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // const Delegate = async ({ from, to, amount, denom }: IOption) => {\n    //     const rpc = await client();\n    //     const msg = {\n    //         typeUrl: '/cosmos.staking.v1beta1.MsgDelegate',\n    //         value: {\n    //             delegatorAddress: from,\n    //             validatorAddress: to,\n    //             amount: coin(Math.floor(amount), denom),\n    //         },\n    //     };\n    //\n    //     const resp = await rpc.signAndBroadcast(from, [msg], fee);\n    //     console.log(resp);\n    // };\n\n    return {\n        isLoading,\n        Delegate,\n        Undelegate,\n        Claim,\n        Redelegate,\n    };\n};\n\nexport default useStargateSDK;\n","import styled from 'styled-components';\n\nconst WrapperDashboardInfo = styled.div`\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-auto-rows: minmax(fit-content, auto);\n    grid-gap: 20px;\n`;\n\nexport { WrapperDashboardInfo };\n","import React, { useContext, useEffect, useMemo } from 'react';\nimport useApi from '../../../hooks/useApi';\nimport useRequest from '../../../hooks/useRequest';\nimport MyDelegatedCard from './MyDelegatedCard';\nimport { Spinner } from 'react-bootstrap';\nimport { store } from '../../../store';\nimport { FlexJustifyCenter } from '../../styled/Flex';\nimport useStargateSDK, {\n    IOption,\n    IRedelegate,\n} from '../../../hooks/useStargateSDK';\nimport { convertIntToMutez } from '../../../utils/helpers';\nimport { WrapperDashboardInfo } from '../styles/WrapperDashboard';\n\nconst Delegations = () => {\n    const { account, chain, setBalance } = useContext(store);\n    const { API } = useApi(chain);\n    const { resp, request, isLoading } = useRequest();\n    const { Undelegate, Redelegate } = useStargateSDK(chain);\n\n    useEffect(() => {\n        if (account) {\n            request(API.getDelegations, account.address);\n        }\n    }, [account]);\n\n    const handleUndelegate = async ({ from, to, amount, denom }: IOption) => {\n        await Undelegate({\n            from,\n            to,\n            amount: convertIntToMutez(amount),\n            denom,\n        });\n        await setBalance(account.address, API.getBalance);\n        await request(API.getDelegations, account.address);\n    };\n\n    const handleRedelegate = async ({\n        delegator,\n        validatorFrom,\n        validatorTo,\n        amount,\n        denom,\n    }: IRedelegate) => {\n        await Redelegate({\n            delegator,\n            validatorFrom,\n            validatorTo,\n            amount: convertIntToMutez(amount),\n            denom,\n        });\n        await setBalance(account.address, API.getBalance);\n        await request(API.getDelegations, account.address);\n    };\n\n    const myDelegate = useMemo(() => {\n        if (!Object.keys(resp).length) return [];\n\n        return resp.delegation_responses;\n    }, [resp]);\n\n    return (\n        <div>\n            {isLoading ? (\n                <FlexJustifyCenter>\n                    <Spinner animation=\"border\" variant=\"primary\" />\n                </FlexJustifyCenter>\n            ) : myDelegate.length ? (\n                <WrapperDashboardInfo>\n                    {myDelegate.map((delegate: any, i: number) => (\n                        <MyDelegatedCard\n                            key={i}\n                            delegate={delegate}\n                            handleUndelegate={handleUndelegate}\n                            handleRedelegate={handleRedelegate}\n                        />\n                    ))}\n                </WrapperDashboardInfo>\n            ) : (\n                <FlexJustifyCenter>Not delegations</FlexJustifyCenter>\n            )}\n        </div>\n    );\n};\n\nexport default Delegations;\n","import React, { useContext } from 'react';\nimport Card from '../../styled/Card';\nimport {\n    ellipsis,\n    formatMinimalDenomToCoinDenom,\n} from '../../../utils/helpers';\nimport { Button } from 'react-bootstrap';\nimport { store } from '../../../store';\nimport { FlexAlignCenter } from '../../styled/Flex';\n\ninterface IRewardsProps {\n    data: any;\n    handleClaim(validator: string): void;\n}\n\nconst MyRewardCard = ({ data, handleClaim }: IRewardsProps) => {\n    const { chain } = useContext(store);\n\n    const claim = () => {\n        handleClaim(data.validator_address);\n    };\n    return (\n        <Card>\n            <Card.Header as=\"h5\">Reward</Card.Header>\n            <Card.Body>\n                <FlexAlignCenter>\n                    Validator: {ellipsis(data.validator_address, 15, -5)}\n                </FlexAlignCenter>\n\n                <Card.Text>\n                    Rewards:{' '}\n                    {data.reward\n                        ? formatMinimalDenomToCoinDenom(\n                              data.reward.length ? data.reward[0].amount : 0,\n                              chain.coinDenom,\n                          )\n                        : '0'}\n                </Card.Text>\n\n                <Button variant=\"primary\" onClick={claim}>\n                    Claim\n                </Button>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default MyRewardCard;\n","import React, { useContext, useEffect, useMemo } from 'react';\nimport { store } from '../../../store';\nimport useApi from '../../../hooks/useApi';\nimport useRequest from '../../../hooks/useRequest';\nimport useStargateSDK from '../../../hooks/useStargateSDK';\nimport MyRewardCard from './MyRewardCard';\nimport { Spinner } from 'react-bootstrap';\nimport styled from 'styled-components';\nimport { Flex, FlexJustifyCenter } from '../../styled/Flex';\nimport { formatMinimalDenomToCoinDenom } from '../../../utils/helpers';\nimport { WrapperDashboardInfo } from '../styles/WrapperDashboard';\n\nconst WrapperContent = styled(Flex)`\n    flex-direction: column;\n    gap: 20px;\n`;\n\nconst Rewards = () => {\n    const { account, chain, setBalance } = useContext(store);\n    const { API } = useApi(chain);\n    const { Claim } = useStargateSDK(chain);\n    const rewardsRequest: any = useRequest();\n\n    useEffect(() => {\n        if (account) {\n            rewardsRequest.request(API.getReward, account.address);\n        }\n    }, [account]);\n\n    const handleClaim = async (validator: string) => {\n        await Claim({ delegate: account.address, validator });\n        await rewardsRequest.request(API.getReward, account.address);\n        await setBalance(account.address, API.getBalance);\n    };\n\n    const rewards = useMemo(() => {\n        if (!Object.keys(rewardsRequest.resp)) return {};\n\n        return rewardsRequest.resp;\n    }, [rewardsRequest.resp]);\n\n    return (\n        <>\n            {rewardsRequest.isLoading ? (\n                <FlexJustifyCenter>\n                    <Spinner animation=\"border\" />\n                </FlexJustifyCenter>\n            ) : rewards.rewards && rewards.total.length ? (\n                <WrapperContent>\n                    <h5>\n                        Total rewards:\n                        {formatMinimalDenomToCoinDenom(\n                            rewards.total[0].amount,\n                            chain.coinDenom,\n                        )}\n                    </h5>\n\n                    <WrapperDashboardInfo>\n                        {rewards.rewards.map(\n                            (elem: any, i: number) =>\n                                !!elem.reward.length && (\n                                    <MyRewardCard\n                                        key={i}\n                                        data={elem}\n                                        handleClaim={handleClaim}\n                                    />\n                                ),\n                        )}\n                    </WrapperDashboardInfo>\n                </WrapperContent>\n            ) : (\n                <FlexJustifyCenter>Not rewards</FlexJustifyCenter>\n            )}\n        </>\n    );\n};\n\nexport default Rewards;\n","import React from 'react';\nimport Card from '../../styled/Card';\nimport BtnCopy from '../../BtnCopy';\nimport {\n    ellipsis,\n    formatDate,\n    formatMinimalDenomToCoinDenom,\n} from '../../../utils/helpers';\nimport styled from 'styled-components';\nimport { FlexAlignCenter } from '../../styled/Flex';\n\ninterface IUnbDelegProps {\n    data: {\n        delegator_address?: string;\n        validator_address: string;\n        entries: {\n            completion_time: string;\n            balance: string;\n        }[];\n    };\n}\n\nconst WrapperEntries = styled.div`\n    display: grid;\n    grid-gap: 10px;\n`;\n\nconst UnbondingDelegationCard = ({ data }: IUnbDelegProps) => {\n    return (\n        <Card>\n            <Card.Header as=\"h5\">Unbonding delegation</Card.Header>\n            <Card.Body>\n                <FlexAlignCenter>\n                    Validator: {ellipsis(data.validator_address)}\n                    <BtnCopy textToCopy={data.validator_address} />\n                </FlexAlignCenter>\n\n                <WrapperEntries>\n                    {data.entries.map((elem, i) => (\n                        <div key={i}>\n                            <span>\n                                Balance:{' '}\n                                {formatMinimalDenomToCoinDenom(elem.balance)}\n                            </span>\n                            <div>\n                                (will be credited:{' '}\n                                {formatDate(elem.completion_time)})\n                            </div>\n                        </div>\n                    ))}\n                </WrapperEntries>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default UnbondingDelegationCard;\n","import React, { useContext, useEffect, useMemo } from 'react';\nimport { store } from '../../../store';\nimport useRequest from '../../../hooks/useRequest';\nimport useApi from '../../../hooks/useApi';\nimport { Spinner } from 'react-bootstrap';\nimport { FlexJustifyCenter } from '../../styled/Flex';\nimport { WrapperDashboardInfo } from '../styles/WrapperDashboard';\nimport UnbondingDelegationCard from './UnbondingDelegationCard';\n\nconst UnbondingDelegations = () => {\n    const { chain, account } = useContext(store);\n    const { API } = useApi(chain);\n    const { request, resp, isLoading } = useRequest();\n\n    useEffect(() => {\n        if (account) {\n            request(API.getUnbondingDelegation, account.address);\n        }\n    }, [account]);\n\n    const unbondingDelegations = useMemo(() => {\n        if (!Object.keys(resp).length) return [];\n\n        return resp.unbonding_responses;\n    }, [resp]);\n\n    return (\n        <>\n            {isLoading ? (\n                <FlexJustifyCenter>\n                    <Spinner animation=\"border\" />\n                </FlexJustifyCenter>\n            ) : unbondingDelegations.length ? (\n                <WrapperDashboardInfo>\n                    {unbondingDelegations.map((elem: any, i: number) => (\n                        <UnbondingDelegationCard key={i} data={elem} />\n                    ))}\n                </WrapperDashboardInfo>\n            ) : (\n                <FlexJustifyCenter>Not unbonding delegations</FlexJustifyCenter>\n            )}\n        </>\n    );\n};\n\nexport default UnbondingDelegations;\n","import React from 'react';\nimport Delegations from '../components/dashboard/delegations/Delegations';\nimport { Tab, Tabs as BTabs } from 'react-bootstrap';\nimport styled from 'styled-components';\nimport Rewards from '../components/dashboard/rewards/Rewards';\nimport UnbondingDelegations from '../components/dashboard/unbonding-delegations/UnbondingDelegations';\n\nconst Tabs = styled(BTabs)`\n    margin-bottom: 20px;\n    .nav-link {\n        color: ${({ theme }) => theme.white};\n        font-weight: 500;\n        font-size: ${({ theme }) => theme.fs18};\n\n        &.active {\n            background-color: ${({ theme }) => theme.blue.b30};\n        }\n\n        &:hover {\n            background-color: ${({ theme }) => theme.blue.b20};\n            color: ${({ theme }) => theme.blue.b70};\n        }\n    }\n`;\n\nconst Dashboard = () => {\n    return (\n        <div>\n            <Tabs defaultActiveKey=\"delegation\" id=\"uncontrolled-tab-example\">\n                <Tab eventKey=\"delegation\" title=\"My delegation\">\n                    <Delegations />\n                </Tab>\n                <Tab eventKey=\"rewards\" title=\"My rewards\">\n                    <Rewards />\n                </Tab>\n                <Tab eventKey=\"unbonding\" title=\"Unbonding delegations\">\n                    <UnbondingDelegations />\n                </Tab>\n            </Tabs>\n        </div>\n    );\n};\n\nexport default Dashboard;\n","import styled from 'styled-components';\nimport { Table as BTable } from 'react-bootstrap';\n\nconst Tbl: any = styled(BTable)`\n    margin-bottom: 0;\n    text-align: center;\n    color: ${({ theme }) => theme.black};\n    background-color: white;\n`;\n\nTbl.Tr = styled.tr`\n    height: ${({ h }: any) => h || '40px'};\n    vertical-align: middle;\n`;\n\nTbl.Th = styled.th`\n    font-size: ${({ theme }) => theme.fs14};\n    color: ${({ theme }) => theme.gray.g20};\n    text-transform: uppercase;\n`;\n\nTbl.THead = styled.thead`\n    width: 100%;\n    position: sticky;\n    top: 0;\n    backdrop-filter: blur(5px);\n    background: ${({ theme }) => theme.gradientTableHead};\n`;\n\nTbl.TBody = styled.tbody`\n    border-color: rgba(128, 128, 128, 0.2);\n`;\n\nexport default Tbl;\n","import React from 'react';\nimport Tbl from '../styled/Tbl';\n\ntype TRow = {\n    row: any;\n    cols: any;\n    index: number;\n};\n\nconst Row = ({ row, cols, index }: TRow) => {\n    return (\n        <Tbl.Tr>\n            {cols.map((col: any) =>\n                col.key === 'rank' ? (\n                    <td key={col.key}>{index}</td>\n                ) : (\n                    <td key={col.key}>{col.process ? col.process(row) : ''}</td>\n                ),\n            )}\n        </Tbl.Tr>\n    );\n};\n\nexport default Row;\n","import React from 'react';\nimport { Table as BTable } from 'react-bootstrap';\nimport Tbl from '../styled/Tbl';\nimport Row from './Row';\n\ntype TTable = {\n    cols: any[];\n    rows: any[];\n};\n\nconst Table = ({ cols, rows }: TTable) => {\n    return (\n        <>\n            {!rows.length && !rows ? (\n                <div>Not data</div>\n            ) : (\n                <BTable>\n                    <Tbl.THead>\n                        <Tbl.Tr h=\"60px\">\n                            {cols.map((elem) => (\n                                <Tbl.Th key={elem.key}>{elem.label}</Tbl.Th>\n                            ))}\n                        </Tbl.Tr>\n                    </Tbl.THead>\n                    <Tbl.TBody>\n                        {rows.map((row, i) => (\n                            <Row key={i} index={i + 1} row={row} cols={cols} />\n                        ))}\n                    </Tbl.TBody>\n                </BTable>\n            )}\n        </>\n    );\n};\n\nexport default Table;\n","import React, { useContext } from 'react';\nimport { Button, InputGroup } from 'react-bootstrap';\nimport { store } from '../../store';\nimport {\n    convertMutezToInt,\n    formatMinimalDenomToCoinDenom,\n} from '../../utils/helpers';\nimport { WrapperBtn } from '../styled/Btn';\nimport { Form } from '../styled/Form';\nimport { Formik, Field } from 'formik';\nimport * as yup from 'yup';\n\ninterface IFormProps {\n    handleClose(): void;\n    handleDelegate({ to, amount }: any): void;\n    validator: string;\n    minDelegation: string;\n}\n\nconst schema = yup.object().shape({\n    amount: yup\n        .number()\n        .required('Required')\n        // .min(0.1, 'Minimum value is 0.1')\n        .max(1000000, 'Maximum value is 1000000')\n        // .test('amount', 'Max value', (val: any, props: any) => {\n        //     if (val < 1000000) {\n        //         return true;\n        //     }\n        //     return val < props.parent.balance;\n        // })\n        .test(\n            'amount',\n            'Min value',\n            (val: any, props: any) => val >= props.parent.minDelegation,\n        ),\n});\n\nconst FormDelegate = ({\n    handleClose,\n    validator,\n    handleDelegate,\n    minDelegation,\n}: IFormProps) => {\n    const { chain, balance } = useContext(store);\n\n    const handleSubmit = async (amount: number | string) => {\n        handleDelegate({\n            to: validator,\n            amount,\n        });\n\n        handleClose();\n    };\n\n    return (\n        <Formik\n            validationSchema={schema}\n            initialValues={{\n                amount: '',\n                balance: convertMutezToInt(balance.amount),\n                minDelegation,\n            }}\n            onSubmit={(values) => {\n                handleSubmit(values.amount);\n            }}\n        >\n            {({\n                handleSubmit,\n                handleChange,\n                values,\n                errors,\n                setFieldValue,\n            }) => (\n                <Form noValidate onSubmit={handleSubmit}>\n                    <Form.Group>\n                        <Form.Label>Delegate to</Form.Label>\n                        <Form.Control value={validator} disabled />\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label>\n                            Available balance:{' '}\n                            {formatMinimalDenomToCoinDenom(\n                                balance ? balance.amount : 0,\n                                chain.coinDenom,\n                            )}\n                        </Form.Label>\n                    </Form.Group>\n\n                    <div>\n                        <Form.Label>Amount to Delegate</Form.Label>\n                        <InputGroup>\n                            <Field\n                                as={Form.Control}\n                                type=\"number\"\n                                name=\"amount\"\n                                placeholder=\"Enter amount\"\n                                value={values.amount}\n                                onChange={handleChange}\n                                isInvalid={!!errors.amount}\n                            />\n                            <Field\n                                as={Button}\n                                variant=\"primary\"\n                                id=\"button-addon2\"\n                                onClick={() =>\n                                    setFieldValue(\n                                        'amount',\n                                        Math.floor(\n                                            convertMutezToInt(balance.amount),\n                                        ),\n                                    )\n                                }\n                            >\n                                max\n                            </Field>\n                            <Form.Control.Feedback type=\"invalid\">\n                                {errors.amount}\n                            </Form.Control.Feedback>\n                        </InputGroup>\n                    </div>\n\n                    <WrapperBtn>\n                        <Button\n                            variant=\"secondary\"\n                            type=\"button\"\n                            onClick={handleClose}\n                        >\n                            Close\n                        </Button>\n\n                        <Button variant=\"primary\" type=\"submit\">\n                            Delegate\n                        </Button>\n                    </WrapperBtn>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n\nexport default FormDelegate;\n","import React, { useContext } from 'react';\nimport { Button } from 'react-bootstrap';\nimport LayoutModal from '../LayoutModal';\nimport FormDelegate from './FormDelegate';\nimport useShowModal from '../../hooks/useShowModal';\nimport { capitalizeLetters, convertIntToMutez } from '../../utils/helpers';\nimport useStargateSDK from '../../hooks/useStargateSDK';\nimport useApi from '../../hooks/useApi';\nimport { store } from '../../store';\n\ntype TDelegationProps = {\n    data: any;\n};\n\ntype THandleDelegateProps = {\n    to: string;\n    amount: number;\n};\n\nconst Delegate = ({ data }: TDelegationProps) => {\n    const { account, chain, setBalance } = useContext(store);\n\n    const { show, handleShow, handleClose } = useShowModal();\n    const {\n        operator_address: validator,\n        description,\n        min_self_delegation,\n    } = data;\n    const { Delegate } = useStargateSDK(chain);\n    const { API } = useApi(chain);\n\n    const handleDelegate = async ({ to, amount }: THandleDelegateProps) => {\n        await Delegate({\n            from: account.address,\n            to,\n            amount: convertIntToMutez(amount),\n            denom: chain.coinMinimalDenom,\n        });\n\n        await setBalance(account.address, API.getBalance);\n    };\n\n    return (\n        <>\n            <Button variant=\"primary\" onClick={handleShow}>\n                Delegation\n            </Button>\n\n            <LayoutModal\n                handleClose={handleClose}\n                show={show}\n                title={capitalizeLetters(description.moniker)}\n            >\n                <FormDelegate\n                    validator={validator}\n                    handleClose={handleClose}\n                    handleDelegate={handleDelegate}\n                    minDelegation={min_self_delegation}\n                />\n            </LayoutModal>\n        </>\n    );\n};\n\nexport default Delegate;\n","import React, { useContext, useEffect, useMemo } from 'react';\nimport styled from 'styled-components';\nimport Table from '../components/table/Table';\nimport useRequest from '../hooks/useRequest';\nimport { formatToken, formatPercent } from '../utils/helpers';\nimport Delegate from '../components/stake/Delegate';\nimport useApi from '../hooks/useApi';\nimport { store } from '../store';\nimport { Spinner } from 'react-bootstrap';\nimport { FlexJustifyCenter } from '../components/styled/Flex';\n\nconst WrapperTable = styled.div`\n    background: white;\n    height: 100vh;\n    overflow: scroll;\n`;\n\nconst Stake = () => {\n    const { chain } = useContext(store);\n    const { API } = useApi(chain);\n    const { resp, isLoading, request } = useRequest();\n\n    useEffect(() => {\n        if (chain) {\n            request(API.getValidators);\n        }\n    }, [chain]);\n\n    const validators = useMemo(() => {\n        if (!Object.keys(resp)) return [];\n\n        return resp.validators;\n    }, [resp]);\n\n    const cols = [\n        {\n            key: 'rank',\n            label: 'Rank',\n        },\n        {\n            key: 'name',\n            label: 'Name',\n            process(data: any): JSX.Element {\n                return (\n                    <div style={{ width: '225px' }}>\n                        {data.description.moniker}\n                    </div>\n                );\n            },\n        },\n        {\n            key: 'tokens',\n            label: 'Voting power',\n            process(data: any): JSX.Element {\n                return (\n                    <div style={{ width: '150px' }}>\n                        {formatToken(data.delegator_shares, chain.coinDenom)}\n                    </div>\n                );\n            },\n        },\n        {\n            key: 'commission',\n            label: 'Commission',\n            process(data: any): JSX.Element {\n                return (\n                    <div>\n                        {formatPercent(data.commission.commission_rates.rate)}\n                    </div>\n                );\n            },\n        },\n        {\n            key: 'button',\n            label: '',\n            process(data: any): JSX.Element {\n                return (\n                    <div style={{ width: '80px' }}>\n                        <Delegate data={data} />\n                    </div>\n                );\n            },\n        },\n    ];\n    return (\n        <>\n            {isLoading ? (\n                <FlexJustifyCenter>\n                    <Spinner\n                        animation=\"border\"\n                        role=\"status\"\n                        variant=\"primary\"\n                    />\n                </FlexJustifyCenter>\n            ) : validators ? (\n                <WrapperTable>\n                    <Table cols={cols} rows={validators} />\n                </WrapperTable>\n            ) : (\n                <FlexJustifyCenter>Not validators</FlexJustifyCenter>\n            )}\n        </>\n    );\n};\n\nexport default Stake;\n","import NotFound from '../pages/NotFound';\nimport Dashboard from '../pages/Dashboard';\nimport Stake from '../pages/Stake';\n\nexport interface IRoute {\n    path: string;\n    name: string;\n    exact: boolean;\n    component: any;\n    props?: any;\n}\n\nexport const routes: IRoute[] = [\n    {\n        path: '/stake/:id',\n        name: 'Stake',\n        exact: true,\n        component: Stake,\n    },\n    {\n        path: '/dashboard',\n        name: 'Dashboard',\n        exact: true,\n        component: Dashboard,\n    },\n    {\n        path: '*',\n        name: 'Not Found',\n        exact: false,\n        component: NotFound,\n    },\n];\n","import { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\n/**\n * @return {null}\n */\nfunction ScrollToTop() {\n    const { pathname } = useLocation();\n\n    useEffect(() => {\n        window.scrollTo(0, 0);\n    }, [pathname]);\n\n    return null;\n}\n\nexport default ScrollToTop;\n","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { routes } from './routes';\nimport ScrollToTop from './ScrollToTop';\n\nexport const Routers = () => {\n    return (\n        <>\n            <ScrollToTop />\n            <Switch>\n                <Redirect exact from=\"/\" to=\"/dashboard\" />\n\n                {routes.map((route, index) => (\n                    <Route\n                        key={index}\n                        path={route.path}\n                        exact={route.exact}\n                        render={(props) => (\n                            <route.component\n                                name={route.name}\n                                {...props}\n                                {...route.props}\n                            />\n                        )}\n                    />\n                ))}\n            </Switch>\n        </>\n    );\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport Box from '../styled/Box';\nimport { CustomContainer } from '../styled/Container';\n\nconst CustomBox = styled(Box)`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 50px;\n    color: white;\n`;\n\nconst AppFooter = () => {\n    const isYear = new Date().getFullYear();\n\n    return (\n        <CustomBox color=\"linear-gradient(0deg, #424a4f -3.02%, #131719 150.08%)\">\n            <CustomContainer>\n                <span>© Everstake {isYear}. All rights reserved.</span>\n            </CustomContainer>\n        </CustomBox>\n    );\n};\n\nexport default AppFooter;\n","import { useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\n\nconst useThemeContext = () => {\n    return useContext(ThemeContext);\n};\n\nexport default useThemeContext;\n","import React, { useContext, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { store } from '../../store';\nimport { CHAIN_LIST_MAINNET, CHAIN_LIST_TESTNET } from '../../utils/constants';\nimport {\n    capitalizeLetters,\n    ellipsis,\n    formatMinimalDenomToCoinDenom,\n} from '../../utils/helpers';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport { Flex, FlexAlignCenter } from '../styled/Flex';\nimport useApi from '../../hooks/useApi';\nimport useThemeContext from '../../hooks/useThemeContext';\nimport BtnCopy from '../BtnCopy';\nimport { Wallet2 } from 'react-bootstrap-icons';\n\nconst WrapperList = styled.div`\n    padding: 10px 20px;\n    overflow: scroll;\n    border-radius: 5px;\n    background: ${({ theme }) => theme.gradientNav};\n    box-shadow: rgb(2 3 3 / 50%) 20px 20px 50px;\n`;\n\nconst WrapperAccount = styled(Flex)`\n    flex-direction: column;\n    gap: 20px;\n    min-height: 75px;\n`;\n\nconst WrapperBalance = styled(Flex)`\n    flex-direction: column;\n    gap: 5px;\n`;\n\nconst ChainList = styled.ul`\n    display: flex;\n    flex-direction: column;\n    gap: 2px;\n    margin: 10px 0 0;\n    padding: 0;\n    list-style: none;\n`;\n\nconst Li = styled.li<any>`\n    cursor: pointer;\n    padding: 5px 10px;\n    font-size: ${({ theme }) => theme.fs18};\n    color: ${({ theme, activeitem }) => activeitem || theme.white};\n    text-decoration: none;\n\n    &:hover {\n        color: ${({ theme }) => theme.white};\n        background: rgba(128, 128, 128, 0.2);\n    }\n`;\n\nconst Divider = styled.hr`\n    color: ${({ theme }) => theme.white};\n`;\n\nconst Link = styled(NavLink)`\n    cursor: pointer;\n    font-size: ${({ theme }) => theme.fs18};\n    color: ${({ theme }) => theme.gray.g20};\n    text-decoration: none;\n    font-weight: 400;\n    text-transform: uppercase;\n\n    &:hover {\n        color: ${({ theme }) => theme.blue.b40};\n    }\n    &.${(props) => props.activeClassName} {\n        color: ${({ theme }) => theme.blue.b60};\n    }\n`;\n\nconst Title = styled.h2`\n    font-size: ${({ theme }) => theme.fs18};\n    color: ${({ theme }) => theme.gray.g40};\n    font-weight: 400;\n    text-transform: uppercase;\n`;\n\nconst AppNav = () => {\n    const theme = useThemeContext();\n    const { setAccount, chain, account, setBalance, balance } =\n        useContext(store);\n    const { API } = useApi(chain);\n    const history = useHistory();\n\n    useEffect(() => {\n        if (account) {\n            setBalance(account.address, API.getBalance);\n        }\n    }, [account]);\n\n    const handleSetAccount = (chooseChain: any) => {\n        setAccount(chooseChain);\n        history.replace(`/stake/${chooseChain.chainId}`);\n    };\n\n    return (\n        <WrapperList>\n            <WrapperAccount>\n                {account ? (\n                    <FlexAlignCenter>\n                        <Wallet2\n                            size=\"20px\"\n                            style={{\n                                marginRight: '10px',\n                                verticalAlign: 'baseline',\n                            }}\n                        />\n                        {ellipsis(account.address)}\n                        <BtnCopy textToCopy={account.address} />\n                    </FlexAlignCenter>\n                ) : (\n                    <Flex>\n                        <a\n                            href=\"https://chrome.google.com/webstore/detail/keplr/dmkamcknogkgcdfhhbddcghachkejeap?hl=ru\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <h5>(Keplr wallet not installed)</h5>\n                        </a>\n                    </Flex>\n                )}\n\n                <WrapperBalance>\n                    <span>Available Balance</span>\n\n                    <h5>\n                        {formatMinimalDenomToCoinDenom(\n                            balance?.amount,\n                            chain?.coinDenom,\n                        )}\n                    </h5>\n                </WrapperBalance>\n            </WrapperAccount>\n\n            <Divider />\n\n            <Link to=\"/dashboard\" activeClassName=\"selected\">\n                Dashboard\n            </Link>\n\n            <Divider />\n\n            <Title>Blockchain</Title>\n\n            <ChainList>\n                {CHAIN_LIST_MAINNET.map((blockchain, i) => (\n                    <Li\n                        key={i}\n                        onClick={() => handleSetAccount(blockchain)}\n                        activeitem={\n                            chain?.name === blockchain.name\n                                ? theme.blue.b60\n                                : ''\n                        }\n                    >\n                        {capitalizeLetters(blockchain.name)}\n                    </Li>\n                ))}\n            </ChainList>\n\n            <Divider />\n\n            <ChainList>\n                {CHAIN_LIST_TESTNET.map((blockchain, i) => (\n                    <Li\n                        key={i}\n                        onClick={() => handleSetAccount(blockchain)}\n                        activeitem={\n                            chain?.name === blockchain.name\n                                ? theme.blue.b60\n                                : ''\n                        }\n                    >\n                        {capitalizeLetters(blockchain.name)}\n                    </Li>\n                ))}\n            </ChainList>\n        </WrapperList>\n    );\n};\n\nexport default AppNav;\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\nimport AppHeader from '../components/app/AppHeader';\nimport { Routers } from '../router/Routers';\nimport AppFooter from '../components/app/AppFooter';\nimport AppNav from '../components/app/AppNav';\nimport { CustomContainer } from '../components/styled/Container';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n`;\n\nconst WrapperContent = styled.div`\n    background: linear-gradient(0deg, #424a4f -10%, #8d9499);\n`;\n\nconst StakeWrapper = styled.div`\n    display: grid;\n    justify-content: center;\n    grid-template-columns: 25% 1fr;\n    column-gap: 20px;\n    margin: 20px 0;\n    min-height: 100vh;\n`;\n\nconst LayoutDefault: FC = () => {\n    return (\n        <Wrapper>\n            <AppHeader />\n\n            <WrapperContent>\n                <CustomContainer>\n                    <StakeWrapper>\n                        <AppNav />\n\n                        <Routers />\n                    </StakeWrapper>\n                </CustomContainer>\n            </WrapperContent>\n\n            <AppFooter />\n        </Wrapper>\n    );\n};\n\nexport default LayoutDefault;\n","import styled from 'styled-components';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst Toastr = styled(ToastContainer)`\n    .Toastify__toast {\n        min-height: 65px;\n        padding: 5px 20px;\n        border-radius: 5px;\n        font-family: Roboto, sans-serif;\n        font-size: ${({ theme }) => theme.fs16};\n    }\n    .Toastify__toast-theme--light {\n        background: ${({ theme }) => theme.blue.b10};\n    }\n    .Toastify__toast--success {\n        color: ${({ theme }) => theme.gray.g80};\n        background: ${({ theme }) => theme.lightGreen};\n    }\n    .Toastify__toast--error {\n        color: white;\n        background: ${({ theme }) => theme.error};\n    }\n    .Toastify__close-button {\n        outline: none;\n    }\n`;\n\nexport default Toastr;\n","import React from 'react';\n// if it will be deployed on the server, change the hashroute on the browser route\nimport { HashRouter as Router } from 'react-router-dom';\nimport { ThemeProvider } from 'styled-components';\nimport GlobalStyles from '../styled/GlobalStyles';\nimport { Normalize } from 'styled-normalize';\nimport theme from '../../utils/theme';\nimport { StoreProvider } from '../../store';\nimport LayoutDefault from '../../layouts/LayoutDefault';\nimport Toastr from '../styled/Toastr';\n\nfunction App() {\n    return (\n        <Router>\n            <StoreProvider>\n                <Normalize />\n                <ThemeProvider theme={theme}>\n                    <GlobalStyles />\n                    <LayoutDefault />\n                    <Toastr\n                        position=\"top-right\"\n                        autoClose={4000}\n                        hideProgressBar={true}\n                        closeOnClick\n                        pauseOnHover={false}\n                        draggable={false}\n                    />\n                </ThemeProvider>\n            </StoreProvider>\n        </Router>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            },\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/scss/index.scss';\nimport App from './components/app/App';\nimport reportWebVitals from './reportWebVitals';\nimport { Window as KeplrWindow } from '@keplr-wallet/types';\n\ndeclare global {\n    interface Window extends KeplrWindow {\n        keplr: any;\n        getOfflineSigner: any;\n    }\n}\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}